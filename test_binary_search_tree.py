from unittest import TestCase

from BinarySearchTree import BinarySearchTree


class TestBinarySearchTree(TestCase):
    def test_is_complete(self):
        bst = BinarySearchTree()
        bst.insert(4)
        self.assertEqual(True, bst.is_complete())
        bst.insert(2)
        self.assertEqual(False, bst.is_complete())
        bst.insert(6)
        self.assertEqual(True, bst.is_complete())
        bst.insert(1)
        self.assertEqual(False, bst.is_complete())
        bst.insert(3)
        self.assertEqual(False, bst.is_complete())
        bst.insert(5)
        self.assertEqual(False, bst.is_complete())
        bst.insert(7)
        self.assertEqual(True, bst.is_complete())

    def test_is_full(self):
        bst = BinarySearchTree()
        bst.insert(4)
        self.assertEqual(True, bst.is_full())
        bst.insert(2)
        self.assertEqual(False, bst.is_full())
        bst.insert(6)
        self.assertEqual(True, bst.is_full())
        bst.insert(1)
        self.assertEqual(False, bst.is_full())
        bst.insert(3)
        self.assertEqual(True, bst.is_full())
        bst.insert(5)
        self.assertEqual(False, bst.is_full())
        bst.insert(7)
        self.assertEqual(True, bst.is_full())

    def test_tree_search(self):
        bst = BinarySearchTree()  # clrs Figure 12.2
        bst.insert(15)
        bst.insert(6)
        bst.insert(18)
        bst.insert(3)
        bst.insert(7)
        bst.insert(17)
        bst.insert(20)
        bst.insert(2)
        bst.insert(4)
        bst.insert(13)
        bst.insert(9)

        self.assertEqual(15, bst._search(bst.root, 15).key)
        self.assertEqual(6, bst._search(bst.root, 6).key)
        self.assertEqual(18, bst._search(bst.root, 18).key)
        self.assertEqual(3, bst._search(bst.root, 3).key)
        self.assertEqual(7, bst._search(bst.root, 7).key)
        self.assertEqual(17, bst._search(bst.root, 17).key)
        self.assertEqual(20, bst._search(bst.root, 20).key)
        self.assertEqual(2, bst._search(bst.root, 2).key)
        self.assertEqual(4, bst._search(bst.root, 4).key)
        self.assertEqual(13, bst._search(bst.root, 13).key)
        self.assertEqual(9, bst._search(bst.root, 9).key)

        self.assertEqual(None, bst._search(bst.root, 0))
        self.assertEqual(None, bst._search(bst.root, 1))
        self.assertEqual(None, bst._search(bst.root, 5))
        self.assertEqual(None, bst._search(bst.root, 8))
        self.assertEqual(None, bst._search(bst.root, 10))
        self.assertEqual(None, bst._search(bst.root, 11))
        self.assertEqual(None, bst._search(bst.root, 12))
        self.assertEqual(None, bst._search(bst.root, 14))
        self.assertEqual(None, bst._search(bst.root, 16))
        self.assertEqual(None, bst._search(bst.root, 19))
        self.assertEqual(None, bst._search(bst.root, 21))

        self.assertEqual(True, bst.search(15))
        self.assertEqual(True, bst.search(6))
        self.assertEqual(True, bst.search(18))
        self.assertEqual(True, bst.search(3))
        self.assertEqual(True, bst.search(7))
        self.assertEqual(True, bst.search(17))
        self.assertEqual(True, bst.search(20))
        self.assertEqual(True, bst.search(2))
        self.assertEqual(True, bst.search(4))
        self.assertEqual(True, bst.search(13))
        self.assertEqual(True, bst.search(9))

        self.assertEqual(False, bst.search(0))
        self.assertEqual(False, bst.search(1))
        self.assertEqual(False, bst.search(5))
        self.assertEqual(False, bst.search(8))
        self.assertEqual(False, bst.search(10))
        self.assertEqual(False, bst.search(11))
        self.assertEqual(False, bst.search(12))
        self.assertEqual(False, bst.search(14))
        self.assertEqual(False, bst.search(16))
        self.assertEqual(False, bst.search(19))
        self.assertEqual(False, bst.search(21))

    def test_tree_minimum(self):
        bst = BinarySearchTree()  # clrs Figure 12.2
        bst.insert(15)
        bst.insert(6)
        bst.insert(18)
        bst.insert(3)
        bst.insert(7)
        bst.insert(17)
        bst.insert(20)
        bst.insert(2)
        bst.insert(4)
        bst.insert(13)
        bst.insert(9)

        self.assertEqual(2, bst._tree_minimum(bst.root).key)
        self.assertEqual(2, bst._tree_minimum(bst._search(bst.root, 6)).key)
        self.assertEqual(17, bst._tree_minimum(bst._search(bst.root, 18)).key)
        self.assertEqual(2, bst._tree_minimum(bst._search(bst.root, 3)).key)
        self.assertEqual(7, bst._tree_minimum(bst._search(bst.root, 7)).key)
        self.assertEqual(17, bst._tree_minimum(bst._search(bst.root, 17)).key)
        self.assertEqual(20, bst._tree_minimum(bst._search(bst.root, 20)).key)
        self.assertEqual(2, bst._tree_minimum(bst._search(bst.root, 2)).key)
        self.assertEqual(4, bst._tree_minimum(bst._search(bst.root, 4)).key)
        self.assertEqual(9, bst._tree_minimum(bst._search(bst.root, 13)).key)
        self.assertEqual(9, bst._tree_minimum(bst._search(bst.root, 9)).key)

        self.assertEqual(2, bst.tree_minimum(15))
        self.assertEqual(2, bst.tree_minimum(6))
        self.assertEqual(17, bst.tree_minimum(18))
        self.assertEqual(2, bst.tree_minimum(3))
        self.assertEqual(7, bst.tree_minimum(7))
        self.assertEqual(17, bst.tree_minimum(17))
        self.assertEqual(20, bst.tree_minimum(20))
        self.assertEqual(2, bst.tree_minimum(2))
        self.assertEqual(4, bst.tree_minimum(4))
        self.assertEqual(9, bst.tree_minimum(13))
        self.assertEqual(9, bst.tree_minimum(9))

    def test_tree_maximum(self):
        bst = BinarySearchTree()  # clrs Figure 12.2
        bst.insert(15)
        bst.insert(6)
        bst.insert(18)
        bst.insert(3)
        bst.insert(7)
        bst.insert(17)
        bst.insert(20)
        bst.insert(2)
        bst.insert(4)
        bst.insert(13)
        bst.insert(9)

        self.assertEqual(20, bst._tree_maximum(bst.root).key)
        self.assertEqual(13, bst._tree_maximum(bst._search(bst.root, 6)).key)
        self.assertEqual(20, bst._tree_maximum(bst._search(bst.root, 18)).key)
        self.assertEqual(4, bst._tree_maximum(bst._search(bst.root, 3)).key)
        self.assertEqual(13, bst._tree_maximum(bst._search(bst.root, 7)).key)
        self.assertEqual(17, bst._tree_maximum(bst._search(bst.root, 17)).key)
        self.assertEqual(20, bst._tree_maximum(bst._search(bst.root, 20)).key)
        self.assertEqual(2, bst._tree_maximum(bst._search(bst.root, 2)).key)
        self.assertEqual(4, bst._tree_maximum(bst._search(bst.root, 4)).key)
        self.assertEqual(13, bst._tree_maximum(bst._search(bst.root, 13)).key)
        self.assertEqual(9, bst._tree_maximum(bst._search(bst.root, 9)).key)

        self.assertEqual(20, bst.tree_maximum(15))
        self.assertEqual(13, bst.tree_maximum(6))
        self.assertEqual(20, bst.tree_maximum(18))
        self.assertEqual(4, bst.tree_maximum(3))
        self.assertEqual(13, bst.tree_maximum(7))
        self.assertEqual(17, bst.tree_maximum(17))
        self.assertEqual(20, bst.tree_maximum(20))
        self.assertEqual(2, bst.tree_maximum(2))
        self.assertEqual(4, bst.tree_maximum(4))
        self.assertEqual(13, bst.tree_maximum(13))
        self.assertEqual(9, bst.tree_maximum(9))

    def test_tree_successor(self):
        bst = BinarySearchTree()  # clrs Figure 12.2
        bst.insert(15)
        bst.insert(6)
        bst.insert(18)
        bst.insert(3)
        bst.insert(7)
        bst.insert(17)
        bst.insert(20)
        bst.insert(2)
        bst.insert(4)
        bst.insert(13)
        bst.insert(9)

        self.assertEqual(17, bst._tree_successor(bst.root).key)
        self.assertEqual(7, bst._tree_successor(bst._search(bst.root, 6)).key)
        self.assertEqual(20, bst._tree_successor(bst._search(bst.root, 18)).key)
        self.assertEqual(4, bst._tree_successor(bst._search(bst.root, 3)).key)
        self.assertEqual(9, bst._tree_successor(bst._search(bst.root, 7)).key)
        self.assertEqual(18, bst._tree_successor(bst._search(bst.root, 17)).key)
        self.assertEqual(None, bst._tree_successor(bst._search(bst.root, 20)))
        self.assertEqual(3, bst._tree_successor(bst._search(bst.root, 2)).key)
        self.assertEqual(6, bst._tree_successor(bst._search(bst.root, 4)).key)
        self.assertEqual(15, bst._tree_successor(bst._search(bst.root, 13)).key)
        self.assertEqual(13, bst._tree_successor(bst._search(bst.root, 9)).key)

        self.assertEqual(17, bst.tree_successor(15))
        self.assertEqual(7, bst.tree_successor(6))
        self.assertEqual(20, bst.tree_successor(18))
        self.assertEqual(4, bst.tree_successor(3))
        self.assertEqual(9, bst.tree_successor(7))
        self.assertEqual(18, bst.tree_successor(17))
        self.assertEqual(None, bst.tree_successor(20))
        self.assertEqual(3, bst.tree_successor(2))
        self.assertEqual(6, bst.tree_successor(4))
        self.assertEqual(15, bst.tree_successor(13))
        self.assertEqual(13, bst.tree_successor(9))
        self.assertEqual(None, bst.tree_successor(1))

    def test_tree_predecessor(self):
        bst = BinarySearchTree()  # clrs Figure 12.2
        bst.insert(15)
        bst.insert(6)
        bst.insert(18)
        bst.insert(3)
        bst.insert(7)
        bst.insert(17)
        bst.insert(20)
        bst.insert(2)
        bst.insert(4)
        bst.insert(13)
        bst.insert(9)

        self.assertEqual(13, bst._tree_predecessor(bst.root).key)
        self.assertEqual(4, bst._tree_predecessor(bst._search(bst.root, 6)).key)
        self.assertEqual(17, bst._tree_predecessor(bst._search(bst.root, 18)).key)
        self.assertEqual(2, bst._tree_predecessor(bst._search(bst.root, 3)).key)
        self.assertEqual(6, bst._tree_predecessor(bst._search(bst.root, 7)).key)
        self.assertEqual(15, bst._tree_predecessor(bst._search(bst.root, 17)).key)
        self.assertEqual(18, bst._tree_predecessor(bst._search(bst.root, 20)).key)
        self.assertEqual(None, bst._tree_predecessor(bst._search(bst.root, 2)))
        self.assertEqual(3, bst._tree_predecessor(bst._search(bst.root, 4)).key)
        self.assertEqual(9, bst._tree_predecessor(bst._search(bst.root, 13)).key)
        self.assertEqual(7, bst._tree_predecessor(bst._search(bst.root, 9)).key)

        self.assertEqual(13, bst.tree_predecessor(15))
        self.assertEqual(4, bst.tree_predecessor(6))
        self.assertEqual(17, bst.tree_predecessor(18))
        self.assertEqual(2, bst.tree_predecessor(3))
        self.assertEqual(6, bst.tree_predecessor(7))
        self.assertEqual(15, bst.tree_predecessor(17))
        self.assertEqual(18, bst.tree_predecessor(20))
        self.assertEqual(None, bst.tree_predecessor(2))
        self.assertEqual(3, bst.tree_predecessor(4))
        self.assertEqual(9, bst.tree_predecessor(13))
        self.assertEqual(7, bst.tree_predecessor(9))
        self.assertEqual(None, bst.tree_predecessor(1))

    def test_tree_height(self):
        bst = BinarySearchTree()  # clrs Figure 12.2
        bst.insert(15)
        bst.insert(6)
        bst.insert(18)
        bst.insert(3)
        bst.insert(7)
        bst.insert(17)
        bst.insert(20)
        bst.insert(2)
        bst.insert(4)
        bst.insert(13)
        bst.insert(9)

        self.assertEqual(4, bst._height(bst.root))
        self.assertEqual(3, bst._height(bst._search(bst.root, 6)))
        self.assertEqual(1, bst._height(bst._search(bst.root, 3)))
        self.assertEqual(0, bst._height(bst._search(bst.root, 2)))
        self.assertEqual(2, bst._height(bst._search(bst.root, 7)))
        self.assertEqual(1, bst._height(bst._search(bst.root, 13)))
        self.assertEqual(0, bst._height(bst._search(bst.root, 9)))
        self.assertEqual(1, bst._height(bst._search(bst.root, 18)))
        self.assertEqual(0, bst._height(bst._search(bst.root, 17)))
        self.assertEqual(0, bst._height(bst._search(bst.root, 20)))

        self.assertEqual(4, bst.height(15))
        self.assertEqual(3, bst.height(6))
        self.assertEqual(1, bst.height(18))
        self.assertEqual(1, bst.height(3))
        self.assertEqual(2, bst.height(7))
        self.assertEqual(0, bst.height(17))
        self.assertEqual(0, bst.height(20))
        self.assertEqual(0, bst.height(2))
        self.assertEqual(0, bst.height(4))
        self.assertEqual(1, bst.height(13))
        self.assertEqual(0, bst.height(9))

    def test_tree_delete(self):
        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(1)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(2)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(3)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(4)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(5)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(6)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(7)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(8)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(9)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(10)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(11)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(12)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(13)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(14)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], bst.to_array())

        bst = BinarySearchTree()
        bst.insert(8)
        bst.insert(4)
        bst.insert(12)
        bst.insert(2)
        bst.insert(6)
        bst.insert(10)
        bst.insert(14)
        bst.insert(1)
        bst.insert(3)
        bst.insert(5)
        bst.insert(7)
        bst.insert(9)
        bst.insert(11)
        bst.insert(13)
        bst.insert(15)
        bst.delete(15)
        self.assertEqual(True, bst.is_valid_bst())
        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], bst.to_array())
